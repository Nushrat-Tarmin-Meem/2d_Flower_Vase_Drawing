#include <glad/glad.h>
#include <GLFW/glfw3.h>
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>
#include <iostream>

using namespace std;
void framebuffer_size_callback(GLFWwindow* window, int width, int height);
void processInput(GLFWwindow* window);

const unsigned int SCR_WIDTH = 800;
const unsigned int SCR_HEIGHT = 1000;

float rotateAngle = 0.0;
float translate_X = -0.5;
float translate_Y = -0.3;
float scale_X = 1.0;
float scale_Y = 1.0;
float rotateAngle2 = 0.0;
float translate_X2 = -0.5;
float translate_Y2 = -0.3;
float scale_X2 = 1.0;
float scale_Y2 = 1.0;

const char* vertexShaderSource = "#version 330 core\n"
"layout (location = 0) in vec3 aPos;\n"
"uniform mat4 transform;\n"
"void main()\n"
"{\n"
"   gl_Position = transform * vec4(aPos, 1.0);\n"
"}\0";
const char* fragmentShaderSource = "#version 330 core\n"
"out vec4 FragColor;\n"
"uniform vec4 triangleColor;\n"  
"void main()\n"
"{\n"
"   FragColor = triangleColor;\n"
"}\n\0";

int main()
{
    glfwInit();
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

#ifdef __APPLE__
    glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);
#endif

    // glfw window creation
    GLFWwindow* window = glfwCreateWindow(SCR_WIDTH, SCR_HEIGHT, "CSE 4208: Assignment 1", NULL, NULL);
    if (window == NULL)
    {
        std::cout << "Failed to create GLFW window" << std::endl;
        glfwTerminate();
        return -1;
    }
    glfwMakeContextCurrent(window);
    glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);

    // glad: load all OpenGL function pointers
    if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))
    {
        std::cout << "Failed to initialize GLAD" << std::endl;
        return -1;
    }

    // build and compile our shader program
    // vertex shader
    unsigned int vertexShader = glCreateShader(GL_VERTEX_SHADER);
    glShaderSource(vertexShader, 1, &vertexShaderSource, NULL);
    glCompileShader(vertexShader);
    // check for shader compile errors
    int success;
    char infoLog[512];
    glGetShaderiv(vertexShader, GL_COMPILE_STATUS, &success);
    if (!success)
    {
        glGetShaderInfoLog(vertexShader, 512, NULL, infoLog);
        std::cout << "ERROR::SHADER::VERTEX::COMPILATION_FAILED\n" << infoLog << std::endl;
    }
    // fragment shader
    unsigned int fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);
    glShaderSource(fragmentShader, 1, &fragmentShaderSource, NULL);
    glCompileShader(fragmentShader);
    // check for shader compile errors
    glGetShaderiv(fragmentShader, GL_COMPILE_STATUS, &success);
    if (!success)
    {
        glGetShaderInfoLog(fragmentShader, 512, NULL, infoLog);
        std::cout << "ERROR::SHADER::FRAGMENT::COMPILATION_FAILED\n" << infoLog << std::endl;
    }
    // link shaders
    unsigned int shaderProgram = glCreateProgram();
    glAttachShader(shaderProgram, vertexShader);
    glAttachShader(shaderProgram, fragmentShader);
    glLinkProgram(shaderProgram);
    // check for linking errors
    glGetProgramiv(shaderProgram, GL_LINK_STATUS, &success);
    if (!success) {
        glGetProgramInfoLog(shaderProgram, 512, NULL, infoLog);
        std::cout << "ERROR::SHADER::PROGRAM::LINKING_FAILED\n" << infoLog << std::endl;
    }
    glDeleteShader(vertexShader);
    glDeleteShader(fragmentShader);

    // set up vertex data (and buffer(s)) and configure vertex attributes
    float vertices[] = {
                // 11 first flower inner
                0.135685612511995,0.816957310302902,0,
                0.157053069468099,0.831903979582096,0,
                0.187468913439944,0.835310312950598,0,
                0.214764797202586,0.825483191905185,0,
                0.229882285559256,0.812310026577438,0,
                0.229781803748976,0.79578076878633,0,
                0.211494114277962,0.787455850804608,0,
                0.184107796886068,0.782406639838023,0,
                0.153752242000391,0.788917861144186,0,
                0.138614657281665,0.798785174913711,0,
                0.135685612511995,0.816957310302902,0,

                // 45 first flower stick
                0.294637412162926,0.739219710905768,0,
                0.301930290465001,0.733265475547844,0,
                0.310428553137603,0.724658183133185,0,
                0.320148352735109,0.716054928857121,0,
                0.328650653546306,0.708111910241294,0,
                0.334693727953314,0.697503720152948,0,
                0.344385260580657,0.684250549285056,0,
                0.355318520825878,0.674322785549921,0,
                0.360144096446576,0.664374831121813,0,
                0.368642359119178,0.655767538707154,0,
                0.40011157318788,0.608044816794678,0,
                0.406158685733483,0.598100900505165,0,
                0.413423297065395,0.587496748555413,0,
                0.421897330906428,0.574903813347759,0,
                0.426722906527126,0.564955858919651,0,
                0.43153636773204,0.553015083095045,0,
                0.43512021573486,0.53974172153418,0,
                0.437502717505748,0.529785690828882,0,
                0.441090603647163,0.517176603066849,0,
                0.442275797324715,0.511202177015952,0,
                0.423956781589739,0.511805878735863,0,
                0.417905630905542,0.521085521226544,0,
                0.414301592209748,0.531037513793247,0,
                0.41069351537536,0.540325232561118,0,
                0.407097552956757,0.551605772725486,0,
                0.404735241878842,0.564883172424946,0,
                0.399913704396738,0.575495400651887,0,
                0.398736586996376,0.582798374300449,0,
                0.393902935098488,0.591417781130892,0,
                0.387827555582722,0.596711780828579,0,
                0.379341407325905,0.607311894639735,0,
                0.373310447334681,0.619912906124579,0,
                0.368468719159605,0.627203765357357,0,
                0.362405454059623,0.634490586451541,0,
                0.35635834151402,0.644434502741054,0,
                0.351532765893322,0.654382457169163,0,
                0.34060758192529,0.665638768501962,0,
                0.333347008731972,0.676907194250546,0,
                0.322413748486751,0.686834957985681,0,
                0.315132984600459,0.694782014740102,0,
                0.306642798205047,0.704717854752426,0,
                0.300587609382255,0.713333223444275,0,
                0.289666463552818,0.725253808575907,0,
                0.283599160314241,0.731876355871258,0,
                0.294637412162926, 0.739219710905768, 0,

                // 23 first flower leaf 1
                0.389097550170764, 0.604687104553163, 0,
                0.38184909139323, 0.617948351698244, 0,
                0.379462551483747, 0.62724010860471, 0,
                0.375882741619522, 0.641177743964408, 0,
                0.377185041316321, 0.654467258079652, 0,
                0.380942529278714, 0.669757669868583, 0,
                0.388348475461442, 0.682403100877969, 0,
                0.39819749549398, 0.695056608164544, 0,
                0.412916510671757, 0.705069172810168, 0,
                0.417859192311702, 0.714385158548201, 0,
                0.428909558576171, 0.723721334979208, 0,
                0.43750877471364, 0.731720887535361, 0,
                0.449627228636414, 0.715818697749329, 0,
                0.453207038500639, 0.701881062389631, 0,
                0.457988194596795, 0.684626096174366, 0,
                0.45668993303859, 0.672000855857954, 0,
                0.449288024994457, 0.660019698647401, 0,
                0.437012083666489, 0.650015210278966, 0,
                0.425981908094994, 0.644000402842121, 0,
                0.414923465553336, 0.633335678813449, 0,
                0.405098674352367, 0.624667814319869, 0,
                0.397704842585423, 0.614015204706981, 0,
                0.389097550170764, 0.604687104553163, 0,

                // 26 first flower leaf 2
                0.333294512930241, 0.668271634865724, 0,
                0.316269720614875, 0.680836303103215, 0,
                0.290661864716418, 0.688058513979883, 0,
                0.273572462183536, 0.689994801436054, 0,
                0.249153838101226, 0.691906860060657, 0,
                0.224723099603132, 0.691826097288763, 0,
                0.205162356250277, 0.689104391875917, 0,
                0.188036610470043, 0.685062215142596, 0,
                0.170898750274024, 0.679027217012777, 0,
                0.152527238737317, 0.670995359347867, 0,
                0.134167841616394, 0.664956323079454, 0,
                0.109716912425326, 0.661554191313397, 0,
                0.0852700213728532, 0.658816333346172, 0,
                0.0657092780199989, 0.656094627933327, 0,
                0.0864471387732159, 0.65151335969761, 0,
                0.102290775549624, 0.645587391309849, 0,
                0.12791478400246, 0.641022275628511, 0,
                0.149853990987608, 0.633123676537226, 0,
                0.179170877185321, 0.633220591863499, 0,
                0.212140259741964, 0.63133680020906, 0,
                0.232938692574102, 0.63671963895583, 0,
                0.257434041289712, 0.647428782509044, 0,
                0.27579747654923, 0.65413209257629, 0,
                0.292951489299628, 0.662824185901438, 0,
                0.314951268363697, 0.664889693792641, 0,
                0.333294512930241, 0.668271634865724, 0,
        
                // 70 middle flower stick
                0.455903169035718, 0.810496558729733, 0,
                0.458893074153563, 0.799988985594705, 0,
                0.462904291824325, 0.790038339074201, 0,
                0.46693570018806, 0.783409061547858, 0,
                0.470943552743326, 0.772904853528326, 0,
                0.477000760635415, 0.764621621735894, 0,
                0.480000761099747, 0.755774733097948, 0,
                0.485029926207929, 0.745827451692939, 0,
                0.489027683416708, 0.733662559176326, 0,
                0.492020953650049, 0.723708547540325, 0,
                0.492988424355036, 0.715408490170415, 0,
                0.493935704367049, 0.703787063806342, 0,
                0.494889714610053, 0.693272760440323, 0,
                0.496868402521469, 0.683868945187854, 0,
                0.498853820663876, 0.67557225293344, 0,
                0.498789883469459, 0.665054584451925, 0,
                0.499764084405437, 0.657861650080069, 0,
                0.498692295120087, 0.64900130098014, 0,
                0.500650792338529, 0.636276116733509, 0,
                0.502642940711927, 0.629086547477148, 0,
                0.50260255932598, 0.622443809488824, 0,
                0.501537500271621, 0.614690583386949, 0,
                0.501483658423691, 0.605833599402516, 0,
                0.499390556585425, 0.596416323688065, 0,
                0.498325497531066, 0.58866309758619, 0,
                0.496239125923791, 0.580352944869793, 0,
                0.496185284075861, 0.57149596088536, 0,
                0.494102277584081, 0.56373936966799, 0,
                0.494058531082638, 0.556543070180638, 0,
                0.489932899485026, 0.547672625734222, 0,
                0.485807267887414, 0.538802181287807, 0,
                0.482716409304701, 0.532702909452022, 0,
                0.481651350250342, 0.524949683350148, 0,
                0.479578439105049, 0.518853776629859, 0,
                0.477505527959756, 0.51275786990957, 0,
                0.477475241920296, 0.507775816418326, 0,
                0.459152188046725, 0.507715244339405, 0,
                0.460230707563066, 0.517682716437388, 0,
                0.463331661492267, 0.525442672770254, 0,
                0.465421398215037, 0.534306386985678, 0,
                0.468542542837211, 0.545387712312706, 0,
                0.473696217218731, 0.555922206371699, 0,
                0.473763519528643, 0.56699343635224, 0,
                0.473820726492068, 0.5764039818357, 0,
                0.477966548782654, 0.588595795276278, 0,
                0.479048433414491, 0.599116828873288, 0,
                0.478087692940496, 0.608524009241252, 0,
                0.47813816967293, 0.616827431726658, 0,
                0.478188646405364, 0.625130854212064, 0,
                0.47926380080621, 0.63454476481102, 0,
                0.479331103116122, 0.645615994791562, 0,
                0.479398405426034, 0.656687224772103, 0,
                0.479452247273964, 0.665544208756536, 0,
                0.479512819352885, 0.675508315739023, 0,
                0.477550957018947, 0.687679938486627, 0,
                0.476596946775943, 0.698194241852646, 0,
                0.474628354211013, 0.709258741602196, 0,
                0.472646301184102, 0.718108995355638, 0,
                0.470667613272686, 0.727512810608107, 0,
                0.466656395601925, 0.737463457128612, 0,
                0.465699020243425, 0.747424198995603, 0,
                0.459648542582327, 0.75681455378609, 0,
                0.456641811887003, 0.764554319425982, 0,
                0.452617133754259, 0.772290719950378, 0,
                0.447581238415086, 0.781130878357333, 0,
                0.44154422121597, 0.792735479143928, 0,
                0.438554316098125, 0.803243052278956, 0,
                0.435550950518297, 0.811536379417875, 0,
                0.438672095140471, 0.822617704744903, 0,
                0.455903169035718, 0.810496558729733, 0,

                // 30 middle flower leaf
                0.494950286688974, 0.70323686742281, 0,
                0.492991789470531, 0.715962051669442, 0,
                0.49408040433336, 0.727590208264506, 0,
                0.500272216845273, 0.741449436433156, 0,
                0.509514506553953, 0.754765198449266, 0,
                0.523839803218745, 0.7669906630448, 0,
                0.538158369652545, 0.77810900464228, 0,
                0.554496005383709, 0.786466268975616, 0,
                0.573897578773621, 0.796494313152519, 0,
                0.593275596355064, 0.802647426836234, 0,
                0.609589676277758, 0.80712976067638, 0,
                0.627943016190789, 0.812172386246544, 0,
                0.642211105892156, 0.814987305358618, 0,
                0.662580149987055, 0.816715292165611, 0,
                0.67278318016973, 0.820623873813757, 0,
                0.668623897417162, 0.806217814377071, 0,
                0.665499387679492, 0.794582927551016, 0,
                0.660342348182477, 0.783494871992996, 0,
                0.65010230172935, 0.773497113855553, 0,
                0.63578373529555, 0.762378772258073, 0,
                0.623517889314069, 0.75403496838672, 0,
                0.606172401491971, 0.74733502343497, 0,
                0.596970493169239, 0.740661999407185, 0,
                0.579631735578132, 0.735069177453489, 0,
                0.56738944540512, 0.730600304075325, 0,
                0.548011427823677, 0.724447190391611, 0,
                0.533726512544833, 0.718864463784401, 0,
                0.517415797737634, 0.714935691443282, 0,
                0.508234080107875, 0.711584036409659, 0,
                0.494950286688974, 0.70323686742281, 0,

                // 26 middle flower inner
                0.365766868, 0.886034989, 0,
                0.36174219, 0.893771389, 0,
                0.359760137, 0.902621643, 0,
                0.363889133, 0.912045649, 0,
                0.372076459, 0.919268869, 0,
                0.378224525, 0.925931798, 0,
                0.396571135, 0.929867301, 0,
                0.414897554, 0.930481434, 0,
                0.431184713, 0.930535276, 0,
                0.444394474, 0.926704092, 0,
                0.462683877, 0.921229049, 0,
                0.467733233, 0.914603137, 0,
                0.471754546, 0.906313175, 0,
                0.476783711, 0.896365893, 0,
                0.475732112, 0.890826913, 0,
                0.475691731, 0.884184175, 0,
                0.469536934, 0.876414124, 0,
                0.463398964, 0.871411879, 0,
                0.45419369, 0.864185294, 0,
                0.437882976, 0.860256522, 0,
                0.417520662, 0.859635658, 0,
                0.406340065, 0.862366449, 0,
                0.39109441, 0.866190903, 0,
                0.382981116, 0.871146035, 0,
                0.372842023, 0.877755122, 0,
                0.365766868, 0.886034989, 0,

                // 34 koli stick
                0.711732709, 0.697310899, 0,
                0.698438821, 0.687303046, 0,
                0.684123619, 0.676738265, 0,
                0.668800566, 0.667830805, 0,
                0.655499947, 0.656715828, 0,
                0.643224006, 0.64671134, 0,
                0.633000785, 0.639481389, 0,
                0.624813459, 0.632258169, 0,
                0.616622768, 0.624481387, 0,
                0.607407399, 0.615594117, 0,
                0.60021783, 0.605052893, 0,
                0.590999096, 0.595612061, 0,
                0.581763536, 0.583403422, 0,
                0.577644635, 0.575640101, 0,
                0.571479743, 0.566209364, 0,
                0.564283444, 0.554561017, 0,
                0.562180247, 0.543483057, 0,
                0.558041155, 0.532398366, 0,
                0.557967122, 0.520220014, 0,
                0.554866168, 0.512460057, 0,
                0.576249795, 0.513637848, 0,
                0.576310367, 0.523601955, 0,
                0.580452824, 0.535240207, 0,
                0.585643514, 0.551863877, 0,
                0.59286337, 0.567387155, 0,
                0.60211239, 0.58181004, 0,
                0.615436564, 0.596799947, 0,
                0.627729331, 0.609572243, 0,
                0.645118566, 0.623468487, 0,
                0.661493218, 0.637914928, 0,
                0.676860018, 0.654018688, 0,
                0.693214479, 0.66514376, 0,
                0.712659799, 0.682368104, 0,
                0.711732709, 0.697310899, 0,

                // 17 koli part 1
                0.725177643467091, 0.69117418019403, 0,
                0.748473374274088, 0.703877453500646, 0,
                0.780198412499043, 0.714312908172464, 0,
                0.813992399109284, 0.717868150001479, 0,
                0.84776545200905, 0.717979796457346, 0,
                0.881524549101832, 0.715795712664448, 0,
                0.908944220872416, 0.712442830036692, 0,
                0.881405924742473, 0.696282005549945, 0,
                0.856013333936224, 0.685867484588602, 0,
                0.830648654743941, 0.680044424124789, 0,
                0.805276997648167, 0.673073498536594, 0,
                0.77149696684491, 0.671813986956344, 0,
                0.746160199266594, 0.670582386990061, 0,
                0.722934247494513, 0.66935776492727, 0,
                0.697618413626673, 0.671569760334135, 0,
                0.712463903305237, 0.683097256902402, 0,
                0.725177643467091, 0.69117418019403, 0,

                // 42 middle flower outer
                0.441033924333847, 0.824532382775408, 0,
                0.459954509651557, 0.811968667538625, 0,
                0.500039076259553, 0.80865765233182, 0,
                0.533895864001219, 0.822543680280277, 0,
                0.559302410614451, 0.835253931490385, 0,
                0.559386145456352, 0.849028312982975, 0,
                0.544687191751113, 0.861605984026741, 0,
                0.529988238045874, 0.874183655070507, 0,
                0.557428843526933, 0.874274367815899, 0,
                0.584953183849893, 0.888139462053881, 0,
                0.587182624015487, 0.907660147071876, 0,
                0.578871940956888, 0.929441672821177, 0,
                0.564228810479583, 0.951202264860003, 0,
                0.538933910322217, 0.956857855640016, 0,
                0.507271673228687, 0.95675318708764, 0,
                0.515798671295528, 0.970555480194198, 0,
                0.503217511300016, 0.984287994265838, 0,
                0.477964478563601, 0.996830775792145, 0,
                0.442087587761092, 0.997860016557169, 0,
                0.401961153732145, 0.994283841017679, 0,
                0.376568562925896, 0.983869320056336, 0,
                0.376498783890979, 0.972390668812511, 0,
                0.340656782605928, 0.979159235199448, 0,
                0.304772913899927, 0.979040610840089, 0,
                0.292038240027599, 0.967520092175314, 0,
                0.287704961959261, 0.94914029437821, 0,
                0.300293099858264, 0.936555645430952, 0,
                0.274928420665982, 0.930732584967139, 0,
                0.26217979098667, 0.916916336053599, 0,
                0.257860468725315, 0.90083226850526, 0,
                0.270434650817335, 0.885951889309237, 0,
                0.280946862427562, 0.879099588080401, 0,
                0.297805477263478, 0.874563950810804, 0,
                0.325253060648029, 0.875802528680579, 0,
                0.340028771291676, 0.87585137400502, 0,
                0.325169325806129, 0.862028147187988, 0,
                0.327182450963481, 0.845965013350125, 0,
                0.329223487734799, 0.834493340009791, 0,
                0.350261866762236, 0.823084467800883, 0,
                0.375563744823093, 0.818576742145253, 0,
                0.407225981916623, 0.818681410697628, 0,
                0.441033924333847, 0.824532382775408, 0,

                // 24 koli part 2
                0.714679387663848, 0.700322211671632, 0,
                0.727288459273326, 0.691181158097522, 0,
                0.744126140398767, 0.683201925454778, 0,
                0.763116504751394, 0.68211686146182, 0,
                0.792723749266622, 0.691397473105764, 0,
                0.805458423138951, 0.702917991770539, 0,
                0.811867627496065, 0.715565441849222, 0,
                0.822526375079617, 0.732818308232419, 0,
                0.826831741533988, 0.746606645531992, 0,
                0.831137107988359, 0.760394982831566, 0,
                0.833317702829511, 0.771880611978883, 0,
                0.83974086299361, 0.786823792306331, 0,
                0.822861314447218, 0.78791583420278, 0,
                0.803843038480625, 0.784409437698207, 0,
                0.789032438319519, 0.778621266751853, 0,
                0.780547307673628, 0.771706164391591, 0,
                0.772055199124245, 0.763643196906946, 0,
                0.75511982734992, 0.755552317808335, 0,
                0.738219345093054, 0.753200764331637, 0,
                0.721290951222221, 0.746257750357408, 0,
                0.712798842672838, 0.738194782872764, 0,
                0.708514409928942, 0.727850040946337, 0,
                0.710541490893277, 0.714082637357239, 0,
                0.714679387663848, 0.700322211671632, 0,

                // 30 first flower outer
                0.102561783753096, 0.86808747946403, 0,
                0.0448098632944971, 0.867896564024497, 0,
                0.0203324943102174, 0.8413693661105, 0,
                0.0323601670007686, 0.819921523706171, 0,
                0.0170517632045658, 0.801689099230811, 0,
                0.0169010404891454, 0.776895212544149, 0,
                0.0319381433975914, 0.750498640983516, 0,
                0.068362799624198, 0.742354590260298, 0,
                0.10187850744319, 0.755688526484493, 0,
                0.126275490979245, 0.768992318165604, 0,
                0.120045618741867, 0.744178335116885, 0,
                0.122974663511537, 0.726006199727694, 0,
                0.153310122035158, 0.716189126863309, 0,
                0.195884265050919, 0.719635652955923, 0,
                0.2142322436081, 0.737878125612311, 0,
                0.250687044377791, 0.734692852226425, 0,
                0.293331524660748, 0.749709858772815, 0,
                0.299521204174014, 0.767912138705091, 0,
                0.287533724207575, 0.795971684225863, 0,
                0.31193070774363, 0.809275475906974, 0,
                0.299923131415135, 0.834029169869524, 0,
                0.28184645374571, 0.860415693249129, 0,
                0.239302455273034, 0.861927944493848, 0,
                0.208866514939133, 0.855215759567124, 0,
                0.212026667872448, 0.875060917097482, 0,
                0.203058666304932, 0.89982465924106, 0,
                0.172672966876171, 0.901377103209891, 0,
                0.14218678563713, 0.886400289387613, 0,
                0.129928004782934, 0.869830838872393, 0,
                0.102561783753096, 0.86808747946403, 0,
    };

    float vertices2[] = {
        // vase top
        0.467231493840123,0.597638533636068,0,
        0.446461327978149,0.596905611481126,0,
        0.429152183403404,0.596184130718868,0,
        0.416933449038861,0.595590187833894,0,
        0.380277245945233,0.593808359178971,0,
        0.361944096725175,0.592087102602968,0,
        0.346658059586388,0.589268818375399,0,
        0.32730696292891,0.587544196683901,0,
        0.307949136040441,0.58471245199435,0,
        0.291641786348738,0.581337241152257,0,
        0.276355749209951,0.578518956924688,0,
        0.260051764633743,0.575697307581623,0,
        0.244742171686487,0.569004092860864,0,
        0.237576158238596,0.56233779906407,0,
        0.229392197353284,0.55566814015178,0,
        0.231374250380195,0.546817886398339,0,
        0.233366398753594,0.539628317141978,0,
        0.242484179188936,0.532462303694087,0,
        0.25873768703271,0.526980530551745,0,
        0.278051767419736,0.522615975753945,0,
        0.300416325003529,0.517707954803605,0,
        0.320758448174463,0.515007449618382,0,
        0.344151048542163,0.511763478280619,0,
        0.363485319622163,0.510720292476981,0,
        0.388927275326686,0.509697297366317,0,
        0.412326605925378,0.507560449026607,0,
        0.436753979307976,0.507087650299475,0,
        0.467282307084107,0.505527919267262,0,
        0.486623308395098,0.505591856461678,0,
        0.509018152018351,0.505665889002582,0,
        0.529383830997755,0.506840314310548,0,
        0.551782039736503,0.507467908350478,0,
        0.571129771278486,0.508638968542949,0,
        0.603717549737927,0.510960898234917,0,
        0.628161748698004,0.513255907002919,0,
        0.590477502820468,0.50981002873542,0,
        0.644465733274211,0.516077556345985,0,
        0.660773082965914,0.519452767188077,0,
        0.680141005200871,0.52394519637471,0,
        0.69746966744549,0.527877333831324,0,
        0.71378711248368,0.532913229170498,0,
        0.733165130065123,0.539066342854212,0,
        0.746432097906547,0.544645704345925,0,
        0.760757394571338,0.556871168941459,0,
        0.756763002478055,0.569589622957099,0,
        0.742545389509123,0.575078126330432,0,
        0.726285151434358,0.579452776474718,0,
        0.703923958966061,0.584914358924086,0,
        0.67849546372352,0.588151600030858,0,
        0.65713202799967,0.590295178601559,0,
        0.639840382025502,0.592452217634242,0,
        0.62458126581068,0.594062425398889,0,
        0.588969931078437,0.596712453851678,0,
        0.575736614391969,0.596668707350235,0,
        0.5675964000081,0.597195347925297,0,
        0.553345135884212,0.597148236308359,0,
        0.54113313175066,0.597661416421439,0,
        0.525863920189351,0.597610939689004,0,
        0.518738288127407,0.597587383880535,0,
        0.508558813753201,0.597553732725579,0,
        0.467231493840123,0.597638533636068,0,

        // vase body
        0.498535477615164,0.505760119774318,0,
        0.462060580483417,0.505639541601981,0,
        0.41648705543079,0.508794670444782,0,
        0.367863907436156,0.510286825327445,0,
        0.331419154847493,0.515125024492441,0,
        0.294984450439859,0.521616149436548,0,
        0.258549746032224,0.528107274380655,0,
        0.27690274867992,0.0471762099265981,0,
        0.322456177370491,0.0407152295255752,0,
        0.361940504720133,0.0358870785416072,0,
        0.401434880250802,0.0327118533367497,0,
        0.450058028245436,0.0312196984540875,0,
        0.498671128059043,0.0280746177923142,0,
        0.538195648132796,0.0298581699247895,0,
        0.574700689807627,0.0349375254344583,0,
        0.614225209881381,0.0367210775669336,0,
        0.659859024020176,0.0434835033987972,0,
        0.693334539115056,0.050205736506549,0,
        0.744982189599127,0.546244241136248,0,
        0.711456433599107,0.531257379132942,0,
        0.671891720801241,0.522862123884024,0,
        0.632337056184404,0.516119794414216,0,
        0.589752864987615,0.511020342542491,0,
        0.541089524268869,0.50590079430871,0,
        0.498535477615164,0.505760119774318,0,
    };

    unsigned int VBO1, VBO2, VAO1, VAO2;

    // Generating two VAOs and VBOs
    glGenVertexArrays(1, &VAO1);
    glGenVertexArrays(1, &VAO2);
    glGenBuffers(1, &VBO1);
    glGenBuffers(1, &VBO2);

    // First Shape 
    glBindVertexArray(VAO1);
    glBindBuffer(GL_ARRAY_BUFFER, VBO1);
    glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);
    glEnableVertexAttribArray(0);

    // Unbind VBO and VAO for the first shape
    glBindBuffer(GL_ARRAY_BUFFER, 0);
    glBindVertexArray(0);

    // Second Shape 
    glBindVertexArray(VAO2);
    glBindBuffer(GL_ARRAY_BUFFER, VBO2);
    glBufferData(GL_ARRAY_BUFFER, sizeof(vertices2), vertices2, GL_STATIC_DRAW);
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);
    glEnableVertexAttribArray(0);

    // Unbind VBO and VAO for the second shape
    glBindBuffer(GL_ARRAY_BUFFER, 0);
    glBindVertexArray(0);

    // uncomment this call to draw in wireframe polygons.
    glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);

    // render loop
    while (!glfwWindowShouldClose(window))
    {
        // input
        processInput(window);

        // render
        glClearColor(1.0f, 1.0f, 1.0f, 1.0f);
        glClear(GL_COLOR_BUFFER_BIT);

        // colors used
        glm::vec4 color1 = glm::vec4(1.0f, 0.0f, 0.0f, 1.0f);       // Red
        glm::vec4 color2 = glm::vec4(0.564f, 0.933f, 0.564f, 1.0f); // Light Green
        glm::vec4 color3 = glm::vec4(0.45f, 0.75f, 0.45f, 1.0f);    // Dark Green
        glm::vec4 color4 = glm::vec4(1.0f, 0.6f, 0.7f, 1.0f);       // Pink
        glm::vec4 color5 = glm::vec4(1.0f, 1.0f, 0.6f, 1.0f);       // Yellow
        glm::vec4 color6 = glm::vec4(1.0f, 0.65f, 0.0f, 1.0f);      // Orange
        glm::vec4 color7 = glm::vec4(0.0f, 0.0f, 0.55f, 1.0f);      // Deep Blue
        glm::vec4 color8 = glm::vec4(0.68f, 0.85f, 0.9f, 1.0f);     // Light Blue

        // Identity matrix, used as the base for transformations
        glm::mat4 identityMatrix = glm::mat4(1.0f);

        // Transformation matrices for vertices1
        glm::mat4 translationMatrix1, rotationMatrix1, scaleMatrix1, modelMatrix1;
        translationMatrix1 = glm::translate(identityMatrix, glm::vec3(translate_X, translate_Y, 0.0f));
        rotationMatrix1 = glm::rotate(identityMatrix, glm::radians(rotateAngle), glm::vec3(0.0f, 0.0f, 1.0f));
        scaleMatrix1 = glm::scale(identityMatrix, glm::vec3(scale_X, scale_Y, 1.0f));
        modelMatrix1 = translationMatrix1 * rotationMatrix1 * scaleMatrix1;

        // Transformation matrices for vertices2
        glm::mat4 translationMatrix2, rotationMatrix2, scaleMatrix2, modelMatrix2;
        translationMatrix2 = glm::translate(identityMatrix, glm::vec3(translate_X2, translate_Y2, 0.0f));
        rotationMatrix2 = glm::rotate(identityMatrix, glm::radians(rotateAngle2), glm::vec3(0.0f, 0.0f, 1.0f));
        scaleMatrix2 = glm::scale(identityMatrix, glm::vec3(scale_X2, scale_Y2, 1.0f));
        modelMatrix2 = translationMatrix2 * rotationMatrix2 * scaleMatrix2;

        // Get the location of the color uniform
        unsigned int colorLocation = glGetUniformLocation(shaderProgram, "triangleColor");
        glUseProgram(shaderProgram);
        unsigned int transformLoc2 = glGetUniformLocation(shaderProgram, "transform");
        glUniformMatrix4fv(transformLoc2, 1, GL_FALSE, glm::value_ptr(modelMatrix2));

        // vase drawing and coloring
        glBindVertexArray(VAO2); 
        glDrawArrays(GL_LINE_STRIP, 0, 61);
        glUniform4fv(colorLocation, 1, glm::value_ptr(color8));  // vase top deep blue
        glDrawArrays(GL_TRIANGLE_FAN, 61, 25);
        glUniform4fv(colorLocation, 1, glm::value_ptr(color7));  // vase body light blue
        glDrawArrays(GL_TRIANGLE_FAN, 0, 61);

        glUseProgram(shaderProgram);
        unsigned int transformLoc1 = glGetUniformLocation(shaderProgram, "transform");
        glUniformMatrix4fv(transformLoc1, 1, GL_FALSE, glm::value_ptr(modelMatrix1));

        // flowers drawing and coloring
        glBindVertexArray(VAO1); 
        glDrawArrays(GL_LINE_STRIP, 0, 11); 
        glDrawArrays(GL_LINE_STRIP, 11, 45);
        glDrawArrays(GL_LINE_STRIP, 56, 23);
        glDrawArrays(GL_LINE_STRIP, 79, 26);
        glDrawArrays(GL_LINE_STRIP, 105, 70);
        glDrawArrays(GL_LINE_STRIP, 175, 30);
        glDrawArrays(GL_LINE_STRIP, 205, 26);
        glDrawArrays(GL_LINE_STRIP, 231, 34);
        glDrawArrays(GL_LINE_STRIP, 265, 17);
        glDrawArrays(GL_LINE_STRIP, 282, 42);
        glDrawArrays(GL_LINE_STRIP, 324, 24);
        glDrawArrays(GL_LINE_STRIP, 348, 30);

        // middle flower
        glUniform4fv(colorLocation, 1, glm::value_ptr(color6));  
        glDrawArrays(GL_TRIANGLE_FAN, 282, 42);
        glUniform4fv(colorLocation, 1, glm::value_ptr(color5));  
        glDrawArrays(GL_TRIANGLE_FAN, 205, 26);
        glUniform4fv(colorLocation, 1, glm::value_ptr(color3));
        glDrawArrays(GL_TRIANGLE_FAN, 105, 70);
        glUniform4fv(colorLocation, 1, glm::value_ptr(color2));
        glDrawArrays(GL_TRIANGLE_FAN, 175, 30);

        //first flower
        glUniform4fv(colorLocation, 1, glm::value_ptr(color4));  
        glDrawArrays(GL_TRIANGLE_FAN, 348, 30);
        glUniform4fv(colorLocation, 1, glm::value_ptr(color5));  
        glDrawArrays(GL_TRIANGLE_FAN, 0, 11);
        glUniform4fv(colorLocation, 1, glm::value_ptr(color3));  
        glDrawArrays(GL_TRIANGLE_FAN, 11, 45);
        glUniform4fv(colorLocation, 1, glm::value_ptr(color2));
        glDrawArrays(GL_TRIANGLE_FAN, 56, 23);
        glUniform4fv(colorLocation, 1, glm::value_ptr(color2));
        glDrawArrays(GL_TRIANGLE_FAN, 79, 26);

        //koli
        glUniform4fv(colorLocation, 1, glm::value_ptr(color3));
        glDrawArrays(GL_TRIANGLE_FAN, 231, 34);
        glUniform4fv(colorLocation, 1, glm::value_ptr(color1));
        glDrawArrays(GL_TRIANGLE_FAN, 265, 17);
        glUniform4fv(colorLocation, 1, glm::value_ptr(color1));
        glDrawArrays(GL_TRIANGLE_FAN, 324, 24);

        // glfw: swap buffers and poll IO events (keys pressed/released, mouse moved etc.)
        glfwSwapBuffers(window);
        glfwPollEvents();
    }

    // optional: de-allocate all resources once they've outlived their purpose:
    glDeleteVertexArrays(1, &VAO1);
    glDeleteBuffers(1, &VBO1);

    glDeleteVertexArrays(1, &VAO2);
    glDeleteBuffers(1, &VBO2);

    glDeleteProgram(shaderProgram);

    // glfw: terminate, clearing all previously allocated GLFW resources.
    glfwTerminate();
    return 0;
}

// process all input: query GLFW whether relevant keys are pressed/released this frame and react accordingly
void processInput(GLFWwindow* window)
{
    if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
        glfwSetWindowShouldClose(window, true);

    // For Flower Movement:
    // Rotation:
    if (glfwGetKey(window, GLFW_KEY_F) == GLFW_PRESS)
        rotateAngle += 0.03f;
    // Translation:
    if (glfwGetKey(window, GLFW_KEY_UP) == GLFW_PRESS)
        translate_Y += 0.0005f;
    if (glfwGetKey(window, GLFW_KEY_DOWN) == GLFW_PRESS)
        translate_Y -= 0.0005f;
    if (glfwGetKey(window, GLFW_KEY_LEFT) == GLFW_PRESS)
        translate_X -= 0.0005f;
    if (glfwGetKey(window, GLFW_KEY_RIGHT) == GLFW_PRESS)
        translate_X += 0.0005f;
    // Scaling:
    if (glfwGetKey(window, GLFW_KEY_EQUAL) == GLFW_PRESS)
    {
        scale_X += 0.0005f;
        scale_Y += 0.0005f;
    }
    if (glfwGetKey(window, GLFW_KEY_MINUS) == GLFW_PRESS)
    {
        scale_X -= 0.0005f;
        scale_Y -= 0.0005f;
    }

    // For Vase Movement:
    // Rotation:
    if (glfwGetKey(window, GLFW_KEY_V) == GLFW_PRESS)
        rotateAngle2 += 0.03f;
    // Translation: 
    if (glfwGetKey(window, GLFW_KEY_U) == GLFW_PRESS)
        translate_Y2 += 0.0005f;
    if (glfwGetKey(window, GLFW_KEY_D) == GLFW_PRESS)  
        translate_Y2 -= 0.0005f; 
    if (glfwGetKey(window, GLFW_KEY_L) == GLFW_PRESS)   
        translate_X2 -= 0.0005f; 
    if (glfwGetKey(window, GLFW_KEY_R) == GLFW_PRESS)   
        translate_X2 += 0.0005f;
    // Scaling:
    if (glfwGetKey(window, GLFW_KEY_P) == GLFW_PRESS) 
    {
        scale_X2 += 0.0005f;
        scale_Y2 += 0.0005f; 
    }
    if (glfwGetKey(window, GLFW_KEY_M) == GLFW_PRESS)
    {
        scale_X2 -= 0.0005f;
        scale_Y2 -= 0.0005f;
    }

}


// glfw: whenever the window size changed (by OS or user resize) this callback function executes
void framebuffer_size_callback(GLFWwindow* window, int width, int height)
{
    glViewport(0, 0, width, height);
}